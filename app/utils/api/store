import type { NextApiRequest, NextApiResponse } from "next";
import { db } from "@/app/utils/firebase";
import { collection, addDoc } from "firebase/firestore";

type StoreData = {
  imageUrl: string;
  name: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method === "POST") {
    try {
      // 1. Retrieve the data from the request body
      const { imageUrl, name }: StoreData = req.body;

      // 2. Perform some logic with the data
      const processedData = await processStoreData({ imageUrl, name });

      // 3. Store the processed data in Firestore
      await storeStoreData(processedData);

      // 4. Send a response back
      res.status(200).json({ result: processedData });
    } catch (error) {
      // 5. Handle any errors that occur
      res
        .status(500)
        .json({ error: "An error occurred while processing the request." });
    }
  } else {
    // Handle any other HTTP method
    res.status(404).json({ error: "Unsupported HTTP method." });
  }
}

async function processStoreData(data: StoreData): Promise<StoreData> {
  // Add your data processing logic here
  // For example, you could transform or validate the data
  return data;
}

async function storeStoreData(data: StoreData): Promise<void> {
  try {
    // 1. Get a reference to the Firestore collection
    const storeRef = collection(db, "stores");

    // 2. Add the store data to the collection
    await addDoc(storeRef, data);

    console.log("Store data stored successfully");
  } catch (error) {
    console.error("Error storing store data:", error);
    throw error;
  }
}
